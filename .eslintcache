[{"E:\\Polyclinic-react-app\\src\\models\\AppModel.js":"1","E:\\Polyclinic-react-app\\src\\components\\Schedule\\Schedule.jsx":"2","E:\\Polyclinic-react-app\\src\\components\\Note\\Note.jsx":"3","E:\\Polyclinic-react-app\\src\\store\\index.js":"4","E:\\Polyclinic-react-app\\src\\index.js":"5","E:\\Polyclinic-react-app\\src\\store\\actions.js":"6","E:\\Polyclinic-react-app\\src\\components\\Day\\Day.jsx":"7","E:\\Polyclinic-react-app\\src\\store\\reducer.js":"8","E:\\Polyclinic-react-app\\src\\components\\DoctorsList\\DoctorsList.jsx":"9","E:\\Polyclinic-react-app\\src\\components\\About\\About.js":"10","E:\\Polyclinic-react-app\\src\\components\\Login\\Login.js":"11"},{"size":4134,"mtime":1615196741635,"results":"12","hashOfConfig":"13"},{"size":7806,"mtime":1614424426073,"results":"14","hashOfConfig":"13"},{"size":2610,"mtime":1614423427123,"results":"15","hashOfConfig":"13"},{"size":223,"mtime":1613326106519,"results":"16","hashOfConfig":"13"},{"size":991,"mtime":1615316681894,"results":"17","hashOfConfig":"13"},{"size":1626,"mtime":1614433661821,"results":"18","hashOfConfig":"13"},{"size":2358,"mtime":1614423649630,"results":"19","hashOfConfig":"13"},{"size":3052,"mtime":1614433661837,"results":"20","hashOfConfig":"13"},{"size":4049,"mtime":1615199165331,"results":"21","hashOfConfig":"13"},{"size":2477,"mtime":1614433928210,"results":"22","hashOfConfig":"13"},{"size":2742,"mtime":1615322774527,"results":"23","hashOfConfig":"13"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},"1srtt6t",{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"29"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"41"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"46","usedDeprecatedRules":"41"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"E:\\Polyclinic-react-app\\src\\models\\AppModel.js",[],["51","52"],"E:\\Polyclinic-react-app\\src\\components\\Schedule\\Schedule.jsx",[],["53","54"],"E:\\Polyclinic-react-app\\src\\components\\Note\\Note.jsx",[],"E:\\Polyclinic-react-app\\src\\store\\index.js",[],["55","56"],"E:\\Polyclinic-react-app\\src\\index.js",[],"E:\\Polyclinic-react-app\\src\\store\\actions.js",[],"E:\\Polyclinic-react-app\\src\\components\\Day\\Day.jsx",[],["57","58"],"E:\\Polyclinic-react-app\\src\\store\\reducer.js",[],"E:\\Polyclinic-react-app\\src\\components\\DoctorsList\\DoctorsList.jsx",["59"],"import React, {Fragment, PureComponent} from \"react\";\r\nimport './DoctorsList.css'\r\nimport {connect} from 'react-redux';\r\nimport {Link} from \"react-router-dom\";\r\nimport {getDoctors as getDoctorsFromServer} from '../../models/AppModel.js';\r\nimport {addNewDoctorAction, downloadDoctorsAction} from \"../../store/actions\";\r\nimport {addDoctor, deleteDoctor, editDoctor} from \"../../models/AppModel\";\r\nimport Cookies from \"js-cookie\";\r\n\r\n\r\nclass DoctorsList extends PureComponent {\r\n\r\n    async componentDidMount() {\r\n        const doctors = await getDoctorsFromServer();\r\n        this.props.downloadDoctorsDispatch(doctors);\r\n    }\r\n\r\n    onAddDoctorClick = async () => {\r\n        let name = prompt(\"Введите имя\");\r\n        if (name === null) return;\r\n        let position = prompt(\"Введите специализацию\");\r\n        if (position === null) return;\r\n        let image = prompt(\"Вставьте ссылку на фотографию\");\r\n        if (image === null) return;\r\n        const doctors = await addDoctor({\"doctorName\": name, \"doctorSpecialization\": position, \"doctorPhoto\": image});\r\n        this.props.addNewDoctorDispatch(doctors)\r\n    };\r\n\r\n    deleteDoctor = async (id) => {\r\n        if (window.confirm(\"Вы действительно хотите удалить пользователя?\")) {\r\n            const doctors = await deleteDoctor({\"id\": id});\r\n            this.props.addNewDoctorDispatch(doctors)\r\n        }\r\n    };\r\n\r\n    editDoctor = async (id) => {\r\n        let name = prompt(\"Введите имя\");\r\n        if (name === null) return;\r\n        let position = prompt(\"Введите специализацию\");\r\n        if (position === null) return;\r\n        let image = prompt(\"Вставьте ссылку на фотографию\");\r\n        if (image === null) return;\r\n        const doctors = await editDoctor({\r\n            \"id\": id,\r\n            \"doctorName\": name,\r\n            \"doctorSpecialization\": position,\r\n            \"doctorPhoto\": image\r\n        });\r\n        this.props.addNewDoctorDispatch(doctors)\r\n    };\r\n\r\n    render() {\r\n        const {doctors} = this.props;\r\n        return (\r\n            <Fragment>\r\n                <button onClick={this.onAddDoctorClick}>Добавить врача</button>\r\n                <div style={{backgroundColor: 'rgba(256, 0, 0, 0.2)', marginTop: '20px', marginLeft: '20px'}}>\r\n                    {doctors.map(el => {\r\n                        return <div style={{marginBottom: '25px'}}>\r\n                            <Link exact to={\"/schedule/\" + el.id}>\r\n                                <div>\r\n                                    <img src={el.doctorPhoto} width='100px' height='100px'\r\n                                         className=\"doctor-photo-list\"/>\r\n                                    <div className=\"doctor-name-list\">\r\n                                        <p>{el.doctorName}</p>\r\n                                        <p>{el.doctorSpecialization}</p>\r\n                                    </div>\r\n                                </div>\r\n                            </Link>\r\n                            {Cookies.get('isAdmin') === 'true' &&\r\n                            <button className=\"doctor-name-list\"\r\n                                    onClick={() => this.deleteDoctor(el.id)}>Удалить</button>}\r\n                            {Cookies.get('isAdmin') === 'true' &&\r\n                            <button className=\"doctor-name-list\"\r\n                                    onClick={() => this.editDoctor(el.id)}>Изменить</button>}\r\n                        </div>\r\n                    })}\r\n                </div>\r\n            </Fragment>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = ({doctors}) => ({doctors});\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n    downloadDoctorsDispatch: (doctors) => dispatch(downloadDoctorsAction(doctors)),\r\n    addNewDoctorDispatch: (doctors) => dispatch(addNewDoctorAction(doctors))\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(DoctorsList)","E:\\Polyclinic-react-app\\src\\components\\About\\About.js",[],"E:\\Polyclinic-react-app\\src\\components\\Login\\Login.js",[],{"ruleId":"60","replacedBy":"61"},{"ruleId":"62","replacedBy":"63"},{"ruleId":"60","replacedBy":"64"},{"ruleId":"62","replacedBy":"65"},{"ruleId":"60","replacedBy":"66"},{"ruleId":"62","replacedBy":"67"},{"ruleId":"60","replacedBy":"68"},{"ruleId":"62","replacedBy":"69"},{"ruleId":"70","severity":1,"message":"71","line":62,"column":37,"nodeType":"72","endLine":63,"endColumn":73},"no-native-reassign",["73"],"no-negated-in-lhs",["74"],["73"],["74"],["73"],["74"],["73"],["74"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","no-global-assign","no-unsafe-negation"]